Git is a version control system.
Git helps you keep track of code changes.
Git is used to collaborate on code.

---Learning by Examples----

commands
-----------------------------------
git --version 

result: git version dekhabe
-----------------------------------

----Git and GitHub Introduction----

  What is Git?

  Git is a popular version control system. It was created by Linus Torvalds in 2005, and has been maintained by Junio Hamano since then.

  It is used for:
    > Tracking code changes
    > Tracking who made changes
    > Coding collaboration

  What does Git do?
    > Manage projects with Repositories
    > Clone a project to work on a local copy
    > Control and track changes with Staging and Committing
    > Branch and Merge to allow for work on different parts and versions of a project
    > Pull the latest version of the project to a local copy
    > Push local updates to the main project

  Working with Git
    > Initialize Git on a folder, making it a Repository
    > Git now creates a hidden folder to keep track of changes in that folder
    > When a file is changed, added or deleted, it is considered modified
    > You select the modified files you want to Stage
    > The Staged files are Committed, which prompts Git to store a permanent snapshot of the files
    > Git allows you to see the full history of every commit.
    > You can revert back to any previous commit.
    > Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit!

  Why Git?
    > Over 70% of developers use Git!
    > Developers can work together from anywhere in the world.
    > Developers can see the full history of the project.
    > Developers can revert to earlier versions of a project.

  What is GitHub?
    > Git is not the same as GitHub.
    > GitHub makes tools that use Git.
    > GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018.
    > In this tutorial, we will focus on using Git with GitHub.

--------------
Configure Git
-----------------------------------------------------------------------------------
commands:

git config --global user.name "javascript-project-test"

result: Change the user name to your own
-----------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
commands:

git config --global user.email "gantabyakprottoy96@gmail.com"

git config user.email "gantabyakprottoy96@gmail.com"            //If it will Current repository, no need global

result: Change the user e-mail address to your own
------------------------------------------------------------------------------------
Note: Use global to set the username and e-mail for every repository on your computer.
If you want to set the username/e-mail for just the current repo, you can remove global
-------------

-------------------
Creating Git Folder
-----------------------------------------------------------------------------------
commands:

mkdir myproject

result: mkdir makes a new directory
------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
commands:

cd myproject

result: cd changes the current working directory
------------------------------------------------------------------------------------
Note: If you already have a folder/directory you would like to use for Git:
Navigate to it in command line, or open it in your file explorer, right-click and select "Git Bash here"

--------------
Initialize Git
-----------------------------------------------------------------------------------
commands:

git init

result: Initialized empty Git repository in D:/Javascript Practise/.git/
------------------------------------------------------------------------------------
Note: Git now knows that it should watch the folder you initiated it on.
Git creates a hidden folder to keep track of changes.

Git Adding New Files
  > You just created your first local Git repo. But it is empty.
  > So let's add some files, or create a new file using your favourite text editor. Then save or move it to the    folder you just created.

-----------------------------------------------------------------------------------
command:

ls

result: will list the files in the directory.
------------------------------------------------------------------------------------

Then we check the Git status and see if it is a part of our repo
-----------------------------------------------------------------------------------
command:

git status

result: Changes to be committed:, Changes not staged for commit:, Untracked files:, and branch will show.
------------------------------------------------------------------------------------

Now Git is aware of the file, but has not added it to our repository!

Files in your Git repository folder can be in one of 2 states:
  > Tracked - files that Git knows about and are added to the repository
  > Untracked - files that are in your working directory, but not added to the repository

When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.

Git Staging Environment
  One of the core functions of Git is the concepts of the Staging Environment, and the Commit.
  As you are working, you may be adding, editing and removing files. But whenever you hit a milestone or finish a part of the work, you should add the files to a Staging Environment.
  Staged files are files that are ready to be committed to the repository you are working on. You will learn more about commit shortly.

-------------
Git Add file
-----------------------------------------------------------------------------------
command:

git add index.html

result: index.html file added with local repository (the file has been added to the Staging Environment)
------------------------------------------------------------------------------------

--------------------------
Git Add More than One File
-----------------------------------------------------------------------------------
command:

git add --all   or   git add -A   

result: all files are added to the Staging Environment, and we are ready to do our first commit
------------------------------------------------------------------------------------

Note: The shorthand command for git add --all is git add -A


Git Commit
  Since we have finished our work, we are ready move from stage to commit for our repo.

  Adding commits keep track of our progress and changes as we work.
  Git considers each commit change point or "save point".
  It is a point in the project you can go back to if you find a bug, or want to make a change.

  When we commit, we should always include a message.
-----------------------------------------------------------------------------------
command:

git commit -m "First Commit"   

result: [master (root-commit) 33c25a4] First Commit
------------------------------------------------------------------------------------

The commit command performs a commit, and the -m "message" adds a message.

The Staging Environment has been committed to our repo, with the message:
"First release of Hello World!"

Git Commit without Stage
  Sometimes, when you make small changes, using the staging environment seems like a waste of time.
  It is possible to commit changes directly, skipping the staging environment.
  The -a option will automatically stage every changed, already tracked file.

  Let's add a small update to index.html:

    <h3>New Line</h3>

And check the status of our repository. But this time, we will use the --short option to see the changes in a more compact way:
-----------------------------------------------------------------------------------
command:

git status --short   

result: We see the midified files list
------------------------------------------------------------------------------------
Note: Short status flags are:

  ?? - Untracked files
  A - Files added to stage
  M - Modified files
  D - Deleted files

We see the file we expected is modified. So let's commit it directly:
-----------------------------------------------------------------------------------
command:

git commit -a -m "Upfated index.html & git.txt file"   

result: commit changes directly, skipping the staging environment.
------------------------------------------------------------------------------------

Warning: Skipping the Staging Environment is not generally recommended.

Skipping the stage step can sometimes make you include unwanted changes.

If needed index.lock or any file forcely remove:
----------------------------------------Start-----------------------------------------------
command:

rm -f ./.git/index.lock   

result: Will remove index.lock forcely (You can face this problem when you commit message)
-----------------------------------------End------------------------------------------------

Git Commit Log
To view the history of commits for a repository, you can use the log command:
----------------------------------------Start-----------------------------------------------
command:

git log   

result: commit 2b6126c67d6b86adacc7e2614924b3fce249cd3b (HEAD -> master)
        Author: gantabya <gantabyakprottoy96@gmail.com>
        Date:   Fri Aug 18 15:23:33 2023 +0600

          Upfated index.html & git.txt file

        commit 33c25a4eda2ca650dba0df8eb87a8b24650783e5
        Author: gantabya <gantabyakprottoy96@gmail.com>
        Date:   Fri Aug 18 14:25:16 2023 +0600

           First Commit
-----------------------------------------End------------------------------------------------

Git Help
  If you are having trouble remembering commands or options for commands, you can use Git help.
  There are a couple of different ways you can use the help command in command line:
    ----------------------------------------Start-----------------------------------------------
    command:
      1. git commit -help    //(See all the available options for the specific command)//
      2. git help --all      //(See all possible commands)//

    Result: all command and description will show
    -----------------------------------------End------------------------------------------------


----------------------------------------Start-----------------------------------------------------------------------

command:

git commit -help

Note: You can also use --help instead of -help to open the relevant Git manual page

result: usage: git commit [-a | --interactive | --patch] [-s] [-v] [-u<mode>] [--amend]
                  [--dry-run] [(-c | -C | --squash) <commit> | --fixup [(amend|reword):]<commit>]
                  [-F <file> | -m <msg>] [--reset-author] [--allow-empty]
                  [--allow-empty-message] [--no-verify] [-e] [--author=<author>]
                  [--date=<date>] [--cleanup=<mode>] [--[no-]status]
                  [-i | -o] [--pathspec-from-file=<file> [--pathspec-file-nul]]
                  [(--trailer <token>[(=|:)<value>])...] [-S[<keyid>]]
                  [--] [<pathspec>...]
        
      -q, --quiet           suppress summary after successful commit
      -v, --verbose         show diff in commit message template

      Commit message options
         -F, --file <file>               read message from file
         --author <author>               override author for commit 
         --date <date>                   override date for commit
         -m, --message <message>         commit message
         -c, --reedit-message <commit>   reuse and edit message from specified commit
         -C, --reuse-message <commit>    reuse message from specified commit
      --fixup [(amend|reword):]commit    use autosquash formatted message to fixup or amend/reword specified commit
         --squash <commit>               use autosquash formatted message to squash specified commit
         --reset-author                  the commit is authored by me now (used with -C/-c/--amend)
         --trailer <trailer>             add custom trailer(s)
         -s, --signoff                   add a Signed-off-by trailer
         -t, --template <file>           use specified template file
         -e, --edit                      force edit of commit
         --cleanup <mode>                how to strip spaces and #comments from message
         --status                        include status in commit message template
         -S, --gpg-sign[=<key-id>]       GPG sign commit

    Commit contents options:
         -a, --all                       commit all changed files
         -i, --include                   add specified files to index for commit
         --interactive                   interactively add files
         -p, --patch                     interactively add changes
         -o, --only                      commit only specified files
         -n, --no-verify                 bypass pre-commit and commit-msg hooks
         --dry-run                       show what would be committed
         --short                         show status concisely
         --branch                        show branch information
         --ahead-behind                  compute full ahead/behind values
         --porcelain                     machine-readable output
         --long                          show status in long format (default)
         -z, --null                      terminate entries with NUL
         --amend                         amend previous commit
         --no-post-rewrite               bypass post-rewrite hook
    -u, --untracked-files[=<mode>]       show untracked files, optional modes: all, normal, no. (Default: all)
    --pathspec-from-file <file>          read pathspec from file
    --pathspec-file-nul              with --pathspec-from-file, pathspec elements are separated with NUL character

-----------------------------------------End-----------------------------------------------------------------------
-------------------------------------------------------------------
If you use 
            git help -all command
                                    will see you all command of Git.
--------------------------------------------------------------------

Git Branch
  Git-এ, একটি Branch হল main repository এর একটি new/Separate version ।
  ধরা যাক(Let's say) আপনার একটি large project রয়েছে এবং আপনাকে এটির design update করতে হবে।

  এটি কীভাবে Git ছাড়া এবং এর সাথে কাজ করবে:

  Git ছাড়া:
    > live version এ প্রভাব এড়াতে(avoid impacting) সমস্ত প্রাসঙ্গিক ফাইলের(all the relevant files) Copy তৈরি করুন
    > Start working with the design and সেই Code টি অন্যান্য file এর code এর উপর নির্ভর করে দেখুন, এটিও(that also) change করা দরকার!
    > নির্ভরশীল file গুলির copy তৈরি করুন। প্রতিটি file নির্ভরতা(dependency) সঠিক ফাইলের নাম উল্লেখ(references) করে তা নিশ্চিত করা
    > EMERGENCY! project এর অন্য কোথাও(somewhere else) একটি অসংলগ্ন(unrelated) error রয়েছে যা শীঘ্রই fixed করা দরকার!
    > আপনার(your) all files save করুন, আপনি যে copy গুলিতে কাজ করছেন তার নামের একটি note তৈরি করুন
    > Work on the unrelated error and এটি fix করতে code update করুন
    > Go back to the design, and finish the work there
    > Copy the code or rename the files, যাতে update করা design টি live version এ থাকে
    > (2 weeks later, আপনি বুঝতে(realize) পারবেন যে নতুন ডিজাইন সংস্করণে unrelated error টি fix করা হয়নি because আপনি fix করার আগে file গুলি copy করেছেন)

  With Git:
    > New-design নামে একটি নতুন branch এর সাথে, main branch কে impact না করে direct code টি edit করুন
    > EMERGENCY! project এর অন্য কোথাও(somewhere else) একটি অসংলগ্ন(unrelated) error রয়েছে যা শীঘ্রই fixed করা দরকার!
    > Create a new branch from the main project called small-error-fix(ছোট-এরর-ফিক্স নামক)
    > Fix the unrelated error এবং small-error-fix branch টিকে main branch এর সাথে merge(একত্রিত) করুন
    > Go back to the new-design branch, and finish the work there
    > new-design branch টিকে main এর সাথে Merge(একীভূত) করুন (আপনি যে small error fix টি হারিয়েছিলেন(were missing) সে সম্পর্কে সতর্ক হওয়া(getting alerted))

  Branches allow you to work on different parts of a project without impacting the main branch.
  When the work is complete, a branch can be merged with the main project.
  You can even switch between branches and work on different projects without them interfering with each other.
  Branching in Git is very lightweight and fast!

New Git Branch
  Let add some new features to our index.html page.
  We are working in our local repository, and we do not want to disturb or possibly wreck the main project.
  So we create a new branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git branch second-branch  

  result: created a new branch called "second-branch"
  -----------------------------------------End------------------------------------------------

  Let's confirm that we have created a new branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git branch 

  result: * master
            second-branch
  -----------------------------------------End------------------------------------------------

We can see the new branch with the name "hello-world-images", but the * beside master specifies that we are currently on that branch.

checkout is the command used to check out a branch. Moving us from the current branch, to the one specified at the end of the command:
  ----------------------------------------Start-----------------------------------------------
  command:

  git checkout second-branch 

  result: Switched to branch 'second-branch'
  -----------------------------------------End------------------------------------------------

Now we have moved our current workspace from the master branch, to the new branch
Open your editor and make some changes.
  example, we added an h2 tag in index.html:
     <h2>for 2nd branch</h2>

We have made changes to a file and added a new file in the working directory (same directory as the main branch).

Now check the status of the current branch

So let's go through what happens here:

There are changes to our index.html, but the file is not staged for commit
<h2>for 2nd branch</h2> is not tracked
So we need to add both files to the Staging Environment for this branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git add --all

  result: added all files all changed (new, modified, and deleted) files.
  -----------------------------------------End------------------------------------------------

  Using --all instead of individual filenames will Stage all changed (new, modified, and deleted) files.

  We are happy with our changes. So we will commit them to the branch:
  ----------------------------------------Start-----------------------------------------------
  command:

  git commit -m "added h2 tag in html"

  result: added all files all changed (new, modified, and deleted) files.
  -----------------------------------------End------------------------------------------------

  Now we have a new branch, that is different from the master branch.
  
Note: Using the -b option on checkout will create a new branch, and move to it, if it does not exist

দেখুন branch নিয়ে কাজ করা কতটা easy? এবং কিভাবে এই আপনি different things work করতে পারবেন?

Emergency Branch
  Now imagine that we are not yet done with second-branch, but we need to fix an error on master.
  I don't want to mess with master directly, and I do not want to mess with second-branch, since it is not done yet.

  So we create a new branch to deal with the emergency:
-----------------------------------------------------------------------------------
command:

git checkout -b emergency-fix   

result: Switched to a new branch 'emergency-fix' (Emergency Branch)
------------------------------------------------------------------------------------
Now we have created a new branch from master, and changed to it. We can safely fix the error without disturbing the other branches.

We have made changes in this file, and we need to get those changes to the master branch.

Now we have a fix ready for master, and we need to merge the two branches.

Git Branch Merge
  We have the emergency fix ready, and so let's merge the master and emergency-fix branches.
  First, we need to change to the master branch:

-----------------------------------------------------------------------------------
command:

git merge emergency-fix   

result: Changed up to date file from emergency-fix branch to master branch
------------------------------------------------------------------------------------

Since the emergency-fix branch came directly from master, and no other changes had been made to master while we were working, Git sees this as a continuation of master. So it can "Fast-forward", just pointing both master and emergency-fix to the same commit.

যেহেতু মাস্টার এবং ইমার্জেন্সি-ফিক্স এখন মূলত একই, আমরা ইমার্জেন্সি-ফিক্স মুছে দিতে পারি, কারণ এটির আর প্রয়োজন নেই:
-----------------------------------------------------------------------------------
command:

git branch -d emergency-fix   

result: Deleted branch emergency-fix (was 47b4504). (Emergency Branch)
------------------------------------------------------------------------------------

Merge Conflict
Now we can move over to hello-world-images and keep working. Add another image file (img_hello_git.jpg) and change index.html, so it shows it:

The conflict has been fixed, and we can use commit to conclude the merge:

Now, we are done with our work here and can stage and commit for this branch:
     git add --all
     git commit -m "added new image"

We see that index.html has been changed in both branches. Now we are ready to merge second-branch into master. But what will happen to the changes we recently made in master?
      git checkout master
      git merge second-branch

CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.

The merge failed, as there is conflict between the versions for index.html. Let us check the status:
      git status

This confirms there is a conflict in index.html, but the change files are ready and staged to be committed.

So we need to fix that conflict. Open the file in our editor:

We can see the differences between the versions and edit it like we want:

Now we can stage index.html and check the status:
      git add index.html
      git status

The conflict has been fixed, and we can use commit to conclude the merge:
      git commit -m "merged with second-branch after fixing conflicts"

And delete the second-branch (Branch):
      git branch -d second-branch


Now you have a better understanding of how branches and merging works. Time to start working with a remote repository!


Git GitHub Getting Started

  First, Create a Github account. If you have an account that fine.

Note: Remember to use the same e-mail address you used in the Git config.

Create a Repository on GitHub
  Now that you have made a GitHub account, sign in, and create a new Repo:
        Check Screenshot: https://prnt.sc/bq6FTAs6yhmq

  And fill in the relevant details:
        Check Screenshot: https://prnt.sc/8ISVrnnqUIim

We will go over the different options and what they mean later. But for now, choose Public (if you want the repo to be viewable for anyone) or Private (if you want to choose who should be able to view the repo). Either way, you will be able to choose who can contribute to the repo.

Then click "Create repository".
  We will go over the different options and what they mean later. 
  কিন্তু আপাতত, choose Public (if you want the repo to be viewable for anyone) or Private (if you want to choose who should be able to view the repo). 
  যেভাবেই হোক(Either way), you will be able to choose কে(who) পারে(can) অবদান(contribute) রাখতে repo তে.

Push Local Repository থেকে(to) GitHub
  Since we have already set up a local Git repo, we are going to push that to GitHub:
           Check Screenshot: https://prnt.sc/D9VzVeDhHQqE

Copy the URL, or click the clipboard marked in the image above.
Now paste it the following command:
            Check Screenshot: https://prnt.sc/IW7HwQeJg8Md

-----------------------------------------------------------------------------------
command:

git remote add origin https://github.com/Gantabya96/my-first-practice.git   

result: git remote add origin URL specifies that you are adding a remote repository, with the specified URL, as an origin to your local Git repo.
------------------------------------------------------------------------------------

Now we are going to push our master branch to the origin url, and set it as the default remote branch:
-----------------------------------------------------------------------------------
command:

git push --set-upstream origin master  

result: Check this Screenshot: https://prnt.sc/rFpQwEp4mVvR
------------------------------------------------------------------------------------

Note: Since this is the first time you are connecting to GitHub, you will get some kind of notification you to authenticate this connection.

Now, go back into GitHub and see that the repository has been updated:
        Check Screenshot: https://prnt.sc/X7krf5rwtuKP

Edit Code in GitHub
  In addition to being a host for Git content, GitHub has a very good code editor.
  Let's try to edit the README.md file in GitHub. Just click the edit button:
        Screenshot: https://prnt.sc/G-T6qjOsPcwa

Add some changes to the code, and then commit the changes. For now, we will "Commit directly to the master branch".
Remember to add a description for the commit:

        Screenshot: https://prnt.sc/ASTRnnvbqUNM

Git Pull from GitHub >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  When working as a team on a project, it is important that everyone stays up to date.
  Any time you start working on a project, you should get the most recent changes to your local copy.

  With Git, you can do that with pull.

  pull is a combination of 2 different commands:

    > fetch
    > merge
    
  Let's take a closer look into how fetch, merge, and pull works.

Git Fetch
  fetch gets all the change history of a tracked branch/repo.
  So, on your local Git, fetch updates to see what has changed on GitHub:
-----------------------------------------------------------------------------------
command:

git fetch origin  

result: Check this Screenshot: https://prnt.sc/aY5HaKG53CFR
------------------------------------------------------------------------------------

Now that we have the recent changes, we can check our status:

    Screenshot: https://prnt.sc/RqhbvGeWSBU4

We are behind the origin/master by 1 commit. That should be the updated README.md, but lets double check by viewing the log:
-----------------------------------------------------------------------------------
command:

git log origin/master  

result: Check this Screenshot: https://prnt.sc/gDN0fvl_6T4n
------------------------------------------------------------------------------------

That looks as expected, but we can also verify by showing the differences between our local master and origin/master(আমরা আমাদের local master এবং origin/master এর মধ্যে পার্থক্য দেখিয়েও যাচাই করতে পারি):
-----------------------------------------------------------------------------------
command:

git log origin/master  

result: Check this Screenshot: https://prnt.sc/wAcxAQByHjG6 and https://prnt.sc/wKCjE8jBjmO8
------------------------------------------------------------------------------------

That looks precisely as expected! Now we can safely merge.

Git Merge
  merge combines the current branch, with a specified branch.
  We have confirmed that the updates are as expected, and we can merge our current branch (master) with origin/master:
-----------------------------------------------------------------------------------
command:

git merge origin/master  

result: Check this Screenshot: https://prnt.sc/8CcPid61d_Fb
------------------------------------------------------------------------------------

Check our status again to confirm we are up to date:
    Screenshot: https://prnt.sc/BtybXNFvYr_3

There! Your local git is up to date!

Git Pull >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  But what if you just want to update your local repository, without going through all those steps?
  pull is a combination of fetch and merge. It is used to pull all changes from a remote repository into the branch you are working on.

  Make another change to the Readme.md file on GitHub.
    Screenshot: https://prnt.sc/-SciKKokkWjs
  
  Use pull to update our local Git:
-----------------------------------------------------------------------------------
command:

git merge origin/master  

result: update our local Git from GitHub
------------------------------------------------------------------------------------

That is how you keep your local Git up to date from a remote repository. In the next chapter, we will look closer at how push works on GitHub.

Git Push to GitHub >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  Let's try making some changes to our local git and pushing them to GitHub.

  Commit the changes:
-----------------------------------------------------------------------------------
command:

git commit -a -m "push git.txt file"  

result: Check Screenshot: https://prnt.sc/xiTHyFlTiDpn
------------------------------------------------------------------------------------

And check the status:
  Screenshot: https://prnt.sc/y4gkOXJmjivr

Now push our changes to our remote origin:
-----------------------------------------------------------------------------------
command:

git push origin  

result: Check Screenshot: https://prnt.sc/xiTHyFlTiDpn
------------------------------------------------------------------------------------
Go to GitHub, and confirm that the repository has a new commit:
  Screenshot: https://prnt.sc/aX6Swkjcipur

Now, we are going to start working on branches on GitHub.

Create a New Branch on GitHub
  On GitHub, access your repository and click the "master" branch button.
  There you can create a new Branch. Type in a descriptive name, and click Create branch:
    Screenshot: https://prnt.sc/u_ev9GjWXz4r

The branch should now be created and active. You can confirm which branch you are working on by looking at the branch button. See that it now says "html-skeleton" instead of "main"?
  Screenshot: https://prnt.sc/ixgWPNfkIT2T

Start working on an existing file in this branch. Click the "index.html" file and start editing:
  Screenshot: https://prnt.sc/A7te2nu5RSBz

After you have finished editing the file, you can click the "Preview changes" tab to see the changes you made highlighted:
  Screenshot: https://prnt.sc/1X21wAwm7FS5

If you are happy with the change, add a comment that explains what you did, and click Commit changes.
You now have a new branch on GitHub, updated with some changes!

Pulling a Branch from GitHub >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  Now continue working on our new branch in our local Git.
  Lets pull from our GitHub repository again so that our code is up-to-date:

-----------------------------------------------------------------------------------
command:

git pull  

result: Already Up to Date
------------------------------------------------------------------------------------

Now our main branch is up todate. And we can see that there is a new branch available on GitHub.
Do a quick status check:
    Screenshot: https://prnt.sc/7Mi8Rk-dbySH

And confirm which branches we have, and where we are working at the moment:
-----------------------------------------------------------------------------------
command:

git branch 

result: *master
------------------------------------------------------------------------------------

So, we do not have the new branch on our local Git. But we know it is available on GitHub. So we can use the -a option to see all local and remote branches:
-----------------------------------------------------------------------------------
command:

git branch -a

result: *master
         remote/origin/main
         remote/origin/master
         remote/origin/new-branch
------------------------------------------------------------------------------------

Note: branch -r is for remote branches only.
-----------------------------------------------------------------------------------
command:

git branch -r

result:  remote/origin/main
         remote/origin/master
         remote/origin/new-branch
------------------------------------------------------------------------------------

We see that the branch html-skeleton is available remotely, but not on our local git. Lets check it out:
-----------------------------------------------------------------------------------
command:

git checkout new-branch

result: Screenshot: https://prnt.sc/2z8lJjtkCWjU
------------------------------------------------------------------------------------

And check if it is all up to date:
-----------------------------------------------------------------------------------
command:

git pull

result: Already up to date.
------------------------------------------------------------------------------------

Now, open your favourite editor and confirm that the changes from the GitHub branch carried over.

That is how you pull a GitHub branch to your local Git.
 
Push a Branch to GitHub >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  Let's try to create a new local branch, and push that to GitHub.
  Start by creating a branch, like we did earlier:

    Screenshot: https://prnt.sc/l4ZPX58EmrbS

And we make some changes to the README.md file. Just add a new line.
So now we check the status of the current branch.
    Screenshot: https://prnt.sc/So_cOSidqA8O

We see that README.md is modified but not added to the Staging Environment:
    Screenshot: https://prnt.sc/R0UPbz295E7V

Check the status of the branch:
    Screenshot: https://prnt.sc/a__71I1fjPk7

We are happy with our changes. So we will commit them to the branch:
    Screenshot: https://prnt.sc/0GQYSs8fO6Vb

Now push the branch from our local Git repository, to GitHub, where everyone can see the changes:
-----------------------------------------------------------------------------------
command:

git push origin new-branch

result: Screenshot: https://prnt.sc/rHtE4m-fwbDN
------------------------------------------------------------------------------------

Go to GitHub, and confirm that the repository has a new branch:
    Screenshot: https://prnt.sc/l8iclnfASlWn

In GitHub, we can now see the changes and merge them into the master branch if we approve it.
If you click the "Compare & pull request", you can go through the changes made and new files added:
    Screenshot: https://prnt.sc/lF_l6cV2BrmC

Note: This comparison shows both the changes from update-readme and new-branch because we created the new branch FROM new-branch.

If the changes look good, you can go forward, creating a pull request:
    Screenshot: https://prnt.sc/4GkMlCY6xTQS

A pull request is how you propose changes. You can ask some to review your changes or pull your contribution and merge it into their branch.
Since this is your own repository, you can  merge your pull request yourself:
    Screenshot: https://prnt.sc/FwwevKhwiCGX

The pull request will record the changes, which means you can go through them later to figure out the changes made.
The result should be something like this:
    Screenshot: https://prnt.sc/bQ8HQo2RKVbi

To keep the repo from getting overly complicated, you can delete the now unused branch by clicking "Delete branch".
    Screenshot: https://prnt.sc/k97TdlX5aKKJ

An after you confirm that the changes from the previous branch were included, delete that as well:
    Screenshot: https://prnt.sc/h4Y3Nipgxo2H

Working using the GitHub Flow  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  Explore that how to get the best out of working with GitHub(আপনি শিখবেন কিভাবে GitHub এর সাথে কাজ করে সেরাটা পেতে হয়।).
  The GitHub flow is a workflow designed to work well with Git and GitHub(গিটহাব ফ্লো হল একটি ওয়ার্কফ্লো যা গিট এবং গিটহাবের সাথে ভালভাবে কাজ করার জন্য ডিজাইন করা হয়েছে।).
  It focuses on branching and makes it possible for teams to experiment freely, and make deployments regularly(এটি শাখায় ফোকাস করে এবং দলগুলির জন্য অবাধে পরীক্ষা করা এবং নিয়মিতভাবে স্থাপনা করা সম্ভব করে তোলে।).

  The GitHub flow works like this:
    > Create a new Branch
    > Make changes and add Commits
    > Open a Pull Request
    > Review
    > Deploy
    > Merge
  
  পূর্ববর্তী অধ্যায়গুলি থেকে এটি কীভাবে কাজ করে সে সম্পর্কে আপনার ইতিমধ্যেই ভাল ধারণা থাকা উচিত। এই অধ্যায়টি বোঝার উপর ফোকাস করে যে কীভাবে প্রবাহটি আপনার জন্য একসাথে কাজ করা সহজ করে তোলে।

Create a New Branch >>>>>>>>>>>>>
  Git এর main concept হল শাখা। এবং এটি নিয়মের চারপাশে কাজ করে যে master branch সর্বদা স্থাপনযোগ্য(deployable)।
  তার মানে(That means), আপনি যদি নতুন কিছু চেষ্টা বা পরীক্ষা করতে চান, আপনি একটি নতুন branch তৈরি করুন! branch ব্যবস্থা আপনাকে একটি environment দেয় যেখানে আপনি main branch কে প্রভাবিত না করে change করতে পারেন।
  When your new branch is ready, it can be reviewed(পর্যালোচনা), discussed, and merged(একীভূত) with the main branch when ready(প্রস্তুত).
  আপনি যখন একটি new branch তৈরি করেন, আপনি (প্রায় সর্বদা) এটি master branch থেকে তৈরি করতে চান।


  Note: Keep in mind that you are working with others. Using descriptive names for new branches, so everyone can understand what is happening(দ্রষ্টব্য: মনে রাখবেন যে আপনি অন্যদের সাথে কাজ করছেন। নতুন শাখার জন্য বর্ণনামূলক নাম ব্যবহার করা, যাতে সবাই বুঝতে পারে কি ঘটছে।).

Make Changes and Add Commits >>>>>>>>>>>>>>
  After the new branch is created, it is time to get to work. Make changes by adding, editing and deleting files. Whenever you reach a small milestone, add the changes to your branch by commit.
  Adding commits keeps track of your work. Each commit should have a message explaining what has changed and why. Each commit becomes a part of the history of the branch, and a point you can revert back to if you need to.
  
  Note: commit messages are very important! Let everyone know what has changed and why. Messages and comments make it so much easier for yourself and other people to keep track of changes.

Open a Pull Request >>>>>>>>>>>>
  Pull requests are a key part of GitHub. A Pull Request notifies people you have changes ready for them to consider(বিবেচনা) or review(পর্যালোচনা).
  You can ask others to review your changes or pull your contribution(অবদান) and merge(একত্রিত) it into their branch.

Review >>>>>>>>>>>
  যখন একটি pull request করা হয়, তখন যার কাছে branch এর সঠিক(proper) access আছে তার দ্বারা এটি পর্যালোচনা(review) করা যেতে পারে। এখানেই ভালো আলোচনা এবং পরিবর্তনের পর্যালোচনা হয়।
  Pull request গুলি এমনভাবে design করা হয়েছে যাতে লোকেরা easily একসাথে কাজ করতে পারে এবং একসাথে আরও ভাল result তৈরি করতে পারে!
  If you receive feedback and continue to improve your changes(change গুলিকে improve করা চালিয়ে যান), you can push your changes with new commits, making further reviews possible.

  Note: GitHub shows new commit and feedback in the "unified(সমন্বিত) Pull Request view".

Deploy >>>>>>>>>>
  When the pull request has been(করা হয়েছে) reviewed and everything looks good(ভাল দেখায়), it is time for the final testing. GitHub allows you to deploy from a branch for final testing in production before merging with the master branch.
  If any issues arise(দেখা দেয়), you can undo the changes by deploying the master branch into production again!

  Note: Teams often have dedicated testing environments used for deploying branches.

Merge >>>>>>>>>>>>>
  After exhaustive-এক্সজুসটিভ(সম্পূর্ণ) testing, you can merge the code into the master branch!
  Pull Requests keep records of changes to your code, and if you commented and named changes well, you can go back and understand why changes and decisions were made.

  Note: You can add keywords to your pull request for easier searching!

Git GitHub Pages >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Host Your Page on GitHub >>>>>>>>>
  With GitHub pages, GitHub allows you to host a webpage from your repository. Let's try to use GitHub Pages to host our repository.

Create a New Repository >>>>>>>>
  Start by signing in to GitHub. GitHub pages need a special name and setup to work, so we start by creating a new repository:
    Screenshot: https://prnt.sc/xuuVWoUSWwGy

  This repository needs a special name to function as a GitHub page. It needs to be your GitHub username, followed by .github.io:
    Screenshot: https://prnt.sc/TPD4ioLxcL6v

Push Local Repository to GitHub Pages
  We add this new repository as a remote for our local repository, we are calling it gh-page (for GitHub Pages).
  Copy the URL from here:
    Screenshot: https://prnt.sc/dTxSDBz41KNV
  
  And add it as a new remote:
-----------------------------------------------------------------------------------
command:

git remote add gh-page https://github.com/Gantabya96/Gantabya96.github.io.git

result: github page added
------------------------------------------------------------------------------------

নিশ্চিত করুন যে আপনি master branch এ আছেন, then push the master branch to the new remote:
-----------------------------------------------------------------------------------
command:

git push gh-page master

result: Screenshot: https://prnt.sc/D-X4PldYE5QD
------------------------------------------------------------------------------------

Note: If this is the first time you are connecting to GitHub, you will get some kind of notification to authenticate this connection.

Check that the new repository has received all the files:
    Screenshot: https://prnt.sc/EIb2tbnNP0Md

Check Out Your Own GitHub Page >>
  That looks good, now click the Settings menu and navigate to the Pages tab:
      Screenshot: https://prnt.sc/jLKsvG2PeHw-

The GitHub page is created, and you can click the URL to view the result!

Git GitHub Fork >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Add to Someone Else's Repository >>>>>>>>>>>
  At the heart of Git is collaboration(সহযোগিতা). However, Git does not allow you to add code to someone else's repository without access rights.
  In these next 3 chapters we will show you how to copy a repository, make changes to it, and suggest those changes be implemented to the original repository.
  At the end of these chapters, you will have the opportunity to add a message to our public GitHub page: https://gantabya96.github.io/

Fork a Repository >>>>>>>>>>>>
  A fork is a copy of a repository.
  This is useful when you want to contribute to someone else's project or start your own project based on theirs.
  fork is not a command in Git, but something offered in GitHub and other repository hosts. Let's start by logging in to GitHub, and fork our repository: https://github.com/w3schools-test/w3schools-test.github.io
      Screenshot: https://prnt.sc/YUCySeghgxDy

  Now let's look at how we add a local copy of this for us to work with.

Git Clone from GitHub >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Clone a Fork from GitHub >>>>>>>>>>
  Now we have our own fork, but only on GitHub. We also want a clone on our local Git to keep working on it.
  A clone is a full copy of a repository, including all logging and versions of files.
  Move back to the original repository, and click the green "Code" button to get the URL to clone:
    Screenshot: https://prnt.sc/54CKgFpWxy4G

  Open your Git bash and clone the repository:
-----------------------------------------------------------------------------------
command:

git clone https://github.com/Gantabya96/w3schools-test.github.io.git

result: Screenshot: https://prnt.sc/DlqB0g_DyINV
------------------------------------------------------------------------------------

Take a look in your file system, and you will see a new directory named after the cloned project:
    Screenshot: https://prnt.sc/_uk07yjkPV7j

Note: To specify a specific folder to clone to, add the name of the folder after the repository URL, like this: git clone https://github.com/w3schools-test/w3schools-test.github.io.git myfolder
-----------------------------------------------------------------------------------
command:

git clone https://github.com/Gantabya96/w3schools-test.github.io.git myFolder

result: Screenshot: https://prnt.sc/Bk26YK3yvPHY
------------------------------------------------------------------------------------

Navigate to the new directory, and check the status:
    Screenshot: https://prnt.sc/f4bgocYlS7Cq

And check the log to confirm that we have the full repository data:
    Screenshot: https://prnt.sc/fayT_DvcdUPr

Now we have a full copy of the original repository.

Configuring Remotes >>>>>>>>>
  Basically, we have a full copy of a repository, whose origin we are not allowed to make changes to.
  Let's see how the remotes of this Git is set up:
-----------------------------------------------------------------------------------
command:

git remote -v

result: Screenshot: https://prnt.sc/0MlWVF9qdDQN
------------------------------------------------------------------------------------

We see that origin is set up to the original "w3schools-test" repository, we also want to add our own fork.
First, we rename the original origin remote:
-----------------------------------------------------------------------------------
command:

git remote rename origin upstream

result: Screenshot: https://prnt.sc/OCNITCMIc1Vw
------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
command:

git remote -v

result: Screenshot: https://prnt.sc/2KuXm6yDNW5M
------------------------------------------------------------------------------------

Then fetch the URL of our own fork:
    Screenshot: https://prnt.sc/QaXSIiI-8AuZ

And add that as origin:
-----------------------------------------------------------------------------------
command:

git remote add remote https://github.com/Gantabya96/w3schools-test.github.io.git

result: Screenshot: https://prnt.sc/InowPz1UCu4v
------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------
command:

git remote -v

result: Screenshot: https://prnt.sc/FfYujIjexHXI
------------------------------------------------------------------------------------

Note: According to Git naming conventions, it is recommended to name your own repository origin, and the one you forked for upstream

Now we have 2 remotes:
  > origin - our own fork, where we have read and write access
  > upstream - the original, where we have read-only access

Now we are going to make some changes to the code. In the next chapter, we will cover how we suggest those changes to the original repository.

Git GitHub Send Pull Request >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Push Changes to Our GitHub Fork >>>>>>>>
  We have made a lot of changes to our local Git.
  Now we push them to our GitHub fork:
  commit the changes:
    Screenshot: https://prnt.sc/iTDhQkbqs3Uq

Go to GitHub, and we see that the repository has a new commit. And we can send a Pull Request to the original repository:
    Screenshot: https://prnt.sc/UiJ-VgnAv721

for forchly remove
-----------------------------------------------------------------------------------
command:

git rm -f --cached myFolder

result: Screenshot: https://prnt.sc/FvbeFnz4kIMf
------------------------------------------------------------------------------------

Click that and create a pull request:
    Screenshot: https://prnt.sc/ZfK4dBSckuaI

Remember to add an explanation for the administrators.
    Screenshot: https://prnt.sc/canSHREt-e9t

Pull Request is sent:
    Screenshot: https://prnt.sc/CGxVOqB1L630

Approving Pull Requests
Now any member with access can see the Pull Request when they see the original repository:
    Screenshot: https://prnt.sc/UqejRmXy9PxN

And they can see the proposed changes:
    Screenshot: https://prnt.sc/jQqTXbJvljgG

Comment on the changes and merge:
    Screenshot: https://prnt.sc/bu553JOeABly

Confirm:
    Screenshot: https://prnt.sc/3KtDQH2zsKTX

And changes have been merged with master:
    Screenshot: https://prnt.sc/HBB9ryjFit0F

Git Ignore and .gitignore >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Git Ignore >>>>>>>>
  When sharing your code with others, there are often files or parts of your project, you do not want to share.

Git Ignore
  When sharing your code with others, there are often files or parts of your project, you do not want to share.
  Examples
    > log files
    > temporary files
    > hidden files
    > personal files
    > etc.

Git can specify(নির্দিষ্ট করুন) which files or parts of your project should be ignored by Git using a .gitignore file.
Git .gitignore-এ নির্দিষ্ট করা file এবং folder ট্র্যাক করবে না। যাইহোক, .gitignore  file টি নিজেই Git দ্বারা ট্র্যাক করা হয়।

Create .gitignore >>>>>>>>>
  To create a .gitignore file, go to the root of your local Git, and create it:
-----------------------------------------------------------------------------------
command:

touch .gitignore

result: Screenshot: https://prnt.sc/mRjToYOpfN30
------------------------------------------------------------------------------------

Now open the file using a text editor.
We are just going to add two simple rules:
  > Ignore any files with the .log extension
  > Ignore everything in any directory named temp
      Screenshot: https://prnt.sc/zLMxy3-Whj_Y

Now all .log files and anything in temp folders will be ignored by Git.

Note: In this case, we use a single .gitignore which applies to the entire repository.
It is also possible to have additional .gitignore files in subdirectories. These only apply to files or folders within that directory.


Rules for .gitignore >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  Here are the general rules for matching patterns in .gitignore files:
    > Blank lines are ignored
    > # text comment - Lines starting with # are ignored
    > name - All name files, name folders, and files and folders in any name folder - /name.log, /name/file.txt, /lib/name.log
    > name/ - Ending with / specifies the pattern is for a folder. Matches all files and folders in any name folder - /name/file.txt, /name/log/name.log
    > name.file - All files with the name.file - /name.file, /lib/name.file
    > /name.file - Starting with / specifies the pattern matches only files in the root folder - /name.file
    > lib/name.file - Patterns specifiing files in specific folders are always realative to root (even if you do not start with / ) - /lib/name.file
    > **/lib/name.file - Starting with ** before / specifies that it matches any folder in the repository. Not just on root. - /lib/name.file, /test/lib/name.file
    > **/name - All name folders, and files and folders in any name folder - /name/log.file, /lib/name/log.file, /name/lib/log.file
    > /lib/**/name - All name folders, and files and folders in any name folder within the lib folder. - /lib/name/log.file, /lib/test/name/log.file, /lib/test/ver1/name/log.file
    > *.file - All files withe .file extention - /name.file, /lib/name.file
    > *name/ - All folders ending with name - /lastname/log.file, /firstname/log.file
    > name?.file - ? matches a single non-specific character - /names.file, /name1.file
    > name[a-z].file - [range] matches a single character in the specified range (in this case a character in the range of a-z, and also be numberic.) - /names.file, /nameb.file
    > name[abc].file - [set] matches a single character in the specified set of characters (in this case either a, b, or c) - /namea.file, /nameb.file
    > name[!abc].file - [!set] matches a single character, except the ones spesified in the set of characters (in this case a, b, or c) - /names.file, /namex.file
    > *.file - All files withe .file extention - /name.file, /lib/name.file
    > name/ - ! specifies a negation or exception. Matches all files and folders in any name folder, except name/secret.log - /name/file.txt, /name/log/name.log
    > !name/secret.log - ! specifies a negation or exception. Matches all files and folders in any name folder, except name/secret.log - /name/file.txt, /name/log/name.log
    > *.file - ! specifies a negation or exception. All files withe .file extention, except name.file - /log.file, /lastname.file
    > !name.file - ! specifies a negation or exception. All files withe .file extention, except name.file - /log.file, /lastname.file
    > *.file, !name/*.file, junk.* - Adding new patterns after a negation will re-ignore a previous negated file | All files withe .file extention, except the ones in name folder. Unless the file name is junk - /log.file, /name/log.file

Local and Personal Git Ignore Rules
  It is also possible to ignore files or folders but not show it in the distributed .gitignore file.
  These kinds of ignores are specified in the .git/info/exclude file. It works the same way as .gitignore but are not shown to anyone else.

Git Security SSH >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Git Security >>>>>>>>>>>
  Up to this point, we have used HTTPS to connect to our remote repository.
  HTTPS will usually work just fine, but you should use SSH if you work with unsecured(অসুরক্ষিত) networks. And sometimes, a project will require that you use SSH.

What is SSH >>>>>>>>>>>> 
  SSH is a secure shell network protocol that is used for network management, remote file transfer, and remote system access.
  SSH uses a pair of SSH keys to establish an authenticated(প্রমাণিত) and encrypted secure network protocol. It allows for secure remote communication on unsecured open networks.
  SSH keys are used to initiate a secure "handshake". When generating a set of keys, you will generate a "public" and "private" key.
  The "public" key is the one you share with the remote party. Think of this more as the lock(লক হিসাবে).
  The "private" key is the one you keep for yourself in a secure place. Think of this as the key to the lock(তালার চাবি হিসাবে ভাবুন).
  SSH keys are generated through(মাধ্যম) a security algorithm. It is all very complicated, but it uses prime(মৌলিক) numbers, and large random numbers to make the public and private key.
  It is created so that(যাতে) the public key can be derived(প্রাপ্ত) from the private key, but not the other way around.

Generating an SSH Key Pair >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  In the command line for Linux, Apple, and in the Git Bash for Windows, you can generate an SSH key.
  Let's go through it, step by step.
  Start by creating a new key, using your email as a label:
-----------------------------------------------------------------------------------
command:

ssh-keygen -t rsa -b 1234 -C "gantabyakprottoy96@gmail.com"

result: Screenshot: https://prnt.sc/zlE1i6Z18JNl
------------------------------------------------------------------------------------

You will be prompted(অনুরোধ করা) with the following through this creation:
    Screenshot: https://prnt.sc/HQr__GW5hKB6

Select a file location, or press "Enter" to use the default file location.
    Screenshot: https://prnt.sc/XZp64nG_l44l

Entering a secure passphrase will create an additional layer of security. Preventing anyone who gains access to the computer to use that key without the passphrase. However, it will require you to supply the passphrase anytime the SSH key is used.
Now we add this SSH key pair to the SSH-Agent (using the file location from above):
    Screenshot: https://prnt.sc/0giez3-Sac1j

You will be prompted to supply the passphrase, if you added one.
Now the SSH key pair is ready to use.

Git GitHub Add SSH >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Copy the SSH Public Key >>>>>>>>>>>>
  In the previous chapter, we created an SSH key pair.
  Now we will use the clip < command to copy the public key to our clipboard:
-----------------------------------------------------------------------------------
command:

clip < /Users/user/.ssh/id_rsa.pub

result: copy the public key to our clipboard
------------------------------------------------------------------------------------

Go to GitHub, navigate to the top left corner, click your profile, and select: Settings:
    Screenshot: https://prnt.sc/SCrER-jdSyeX

Then select "SSH and GPG keys". and click the "New SSH key" button:
    Screenshot: https://prnt.sc/nWcKBUQ8YYsV

Select a title, and paste the public SSH key into the "Key" field, and click "Add SSH Key":
    Screenshot: https://prnt.sc/ip2bCsCpdsji

You will be prompted to supply your GitHub password.
You will see your new SSH key added:
    Screenshot: https://prnt.sc/5eG2V66mE712

Test SSH Connection to GitHub >>>>>>>>
  Now we can test our connection via SSH to GitHub:   
-----------------------------------------------------------------------------------
command:

ssh -T git@github.com

result: Screenshot: https://prnt.sc/PklA8Eq_GjBR
------------------------------------------------------------------------------------

If the last line contains your username on GitHub, you are successfully authenticated!

Add New GitHub SSH Remote >>>>>>>>
  Now we can add a new remote via SSH to our Git.
  First, get the SSH address from our repository on GitHub:
    Screenshot: https://prnt.sc/2qVUaK3QXJu3

Then use that address to add a new origin:
-----------------------------------------------------------------------------------
command:

git remote add ssh-origin git@github.com:w3schools-test/hello-world.git

result: address to add a new origin
------------------------------------------------------------------------------------

Note: You can change a remote origin from HTTPS to SSH with the command: git remote set-url remote-name git@github.com:username/repository.git

Git Revert >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  revert(প্রত্যাবর্তন) is the command we use when we want to take a previous commit and add it as a new commit, keeping the log intact.
    Step 1: Find the previous commit:
      Screenshot: https://prnt.sc/cd_8fwUZYjeC
    
    Step 2: Use it to make a new commit:
      Screenshot: https://prnt.sc/8uQ646lM9dO7

  Let's make a new commit, where we have "accidentally" deleted a file:
-----------------------------------------------------------------------------------
command:

git commit -m "Just a regular update, definitely no accidents here..."

result: deleted file will come back(ফিরে এসো)
------------------------------------------------------------------------------------   
Now we have a part in our commit history we want to go back to. Let's try and do that with revert.

Git Revert Find Commit in Log >>>>>>>>
  First thing, আমরা যে বিন্দুতে ফিরে যেতে চাই তা খুঁজে বের করতে হবে। To do that(এটি করার জন্য), আমাদের log এর মধ্য দিয়ে যেতে হবে।
  To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:
    > The first seven characters of the commit hash
    > the commit message
  So let's find the point we want to revert:
-----------------------------------------------------------------------------------
command:

git log --oneline

result: will show previous all commit
------------------------------------------------------------------------------------

We want to revert to the previous commit: 6f3c591 (HEAD -> master) add with revert, and we see that it is the latest commit.

Git Revert HEAD >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  We revert the latest commit using git revert HEAD (revert the latest change,  and then commit), adding the option --no-edit to skip the commit message editor (getting the default revert message):
-----------------------------------------------------------------------------------
command:

git revert HEAD --no-edit

result: revert to the previous commit
------------------------------------------------------------------------------------
Now let's check the log again:
    Screenshot: https://prnt.sc/-SSBMd4COAQM

Note: To revert to earlier commits, use git revert HEAD~x (x being a number. 1 going back one more, 2 going back two more, etc.)
-----------------------------------------------------------------------------------
command:

git revert HEAD~x(x being a number. 1 going back one more, 2 going back two more, etc.)

result: revert to the previous commit according to number
------------------------------------------------------------------------------------

Git Reset >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  reset is the command we use when we want to move the repository back to a previous commit, discarding(বাতিল করা) any changes made after that commit.
    Step 1: Find the previous commit:
      Screenshot: https://prnt.sc/w5OTIyuAG0CC
    Step 2: Move the repository back to that step:
      Screenshot: https://prnt.sc/c6sgt6PVi_2_
  
  After the previous chapter, we have a part in our commit history we could go back to. Let's try and do that with reset.

Git Reset Find Commit in Log >>>>>>>>
  First thing, we need to find the point we want to return to. To do that, we need to go through the log.
  To avoid the very long log list, we are going to use the --oneline option, which gives just one line per commit showing:
    > The first seven characters of the commit hash - this is what we need to refer to in our reset command.
    > the commit message
  So let's find the point we want to reset to:
    Screenshot: https://prnt.sc/uYzoqFEaUYW-

 We want to return to the commit: cbf9565 (upstream/master) Added .gitignore, the last one before we started to mess with things.

 We reset our repository back to the specific commit using git reset commithash (commithash being the first 7 characters of the commit hash we found in the log):
 -----------------------------------------------------------------------------------
command:

git reset commithash (commithash being the first 7 characters of the commit hash we found in the log):

result: revert to the commithash commit according to number
------------------------------------------------------------------------------------

    Screenshot: https://prnt.sc/Q0H9RJLBinhR

Now let's check the log again:
    Screenshot: https://prnt.sc/25YmsnIwKLRG

Warning: Messing with the commit history of a repository can be dangerous. It is usually ok to make these kinds of changes to your own local repository. However, you should avoid making changes that rewrite history to remote repositories, especially if others are working with them.

Git Undo Reset >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  Even though the commits are no longer showing up in the log, it is not removed from Git.
  If you know the commit hash you can reset to it:
    Screenshot: https://prnt.sc/vR_n1kUu4222

  Now let's check the log again:
    Screenshot: https://prnt.sc/vmdSEjJ8stMO

Git Amend(সংশোধন) >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Git commit --amend >>>>>>>>>>>
  commit --amend সবচেয়ে recent commit change করতে ব্যবহৃত হয়।
  It combines(একত্রিত করা) changes in the staging environment with the latest commit, and creates a new commit.
  This new commit replaces the latest commit entirely(সম্পূর্ণরূপে).

Git Amend Commit Message >>>>
  One of the simplest things you can do with --amend is to change a commit message.
  Let's update the README.md and commit:
  